// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models for authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  reminderTime  String    @default("08:00") // 24hr format
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  habits   Habit[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String
  color     String
  createdAt DateTime @default(now())

  habits Habit[]
}

model Habit {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  categoryId  String
  color       String   @default("#3B82F6")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category    @relation(fields: [categoryId], references: [id])
  logs     HabitLog[]
}

model HabitLog {
  id            String   @id @default(cuid())
  habitId       String
  completedDate DateTime @db.Date // Date only (YYYY-MM-DD)
  notes         String?
  createdAt     DateTime @default(now())

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, completedDate])
}
